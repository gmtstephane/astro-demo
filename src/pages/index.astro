---
import { db } from '@db/config';
import { eventTeam, ticket, eventType } from '@db/schema';
import NewEvent from '@src/components/forms/NewEvent.svelte';
import Main from '@src/Layout.astro';
import '@src/styles/global.css';
import { z } from 'zod';
import moment from 'moment-timezone';
import type { CreateTicket } from '@db/queries/types';

const sports = await db.query.sport.findMany();
const championships = await db.query.championship.findMany();
const teams = await db.query.team.findMany();
const locations = await db.query.location.findMany();
const ticketings = await db.query.ticketing.findMany();

const ticketSchema = z.object({
	ticketingId: z.number(),
	price: z.string(),
	url: z.string(),
});

const formSchema = z.object({
	sport: z.number(),
	championship: z.number(),
	location: z.number(),
	homeTeam: z.number(),
	awayTeam: z.number(),
	date: z.date(),
	tickets: z.array(ticketSchema),
});

if (Astro.request.method === 'POST') {
	try {
		const data = await Astro.request.formData();
		const tickets: CreateTicket[] = JSON.parse(data.get('tickets')?.toString() || '[]');
		const createEventForm = formSchema.parse({
			sport: Number(data.get('sport')),
			location: Number(data.get('location')),
			championship: Number(data.get('championship')),
			homeTeam: Number(data.get('homeTeam')),
			awayTeam: Number(data.get('awayTeam')),
			date: moment.tz(data.get('date')?.toString(), 'Europe/Paris').toDate(),
			tickets: tickets,
		});

		await db.transaction(async (tx) => {
			const event = await tx
				.insert(eventTeam)
				.values({
					awayTeamId: createEventForm.awayTeam,
					championshipId: createEventForm.championship,
					eventDate: createEventForm.date,
					homeTeamId: createEventForm.homeTeam,
					locationId: createEventForm.location,
					sportId: createEventForm.sport,
				})
				.returning();

			if (event.length === 0) {
				tx.rollback();
				throw new Error('Failed to create event');
			}

			await tx.insert(eventType).values({
				eventid: event[0].id,
				type: 'Team',
			});

			tickets.map(async (t) => {
				await tx.insert(ticket).values({
					price: t.price,
					eventId: event[0].id,
					ticketingId: t.ticketingId,
					url: t.url,
				});
			});
		});
	} catch (error) {
		if (error instanceof Error) {
			console.error(error.message);
		}
	}
}
---

<Main title="Nouvel Evenement">
	<NewEvent client:load {sports} {championships} {teams} {locations} {ticketings} />
</Main>
